plugins {
    id 'fi.jasoft.plugin.vaadin' version '1.1.6' apply false
    id "org.sonarqube" version "2.2"
}

//common for both projects
subprojects {
    ext.baseNameUpper = project.parent.name.capitalize()
    ext.baseNameLower = project.parent.name.toLowerCase()

    apply plugin: 'java'
    apply plugin: 'fi.jasoft.plugin.vaadin'

    repositories {
        mavenCentral()
        maven {
            url "http://maven.vaadin.com/vaadin-addons"
        }
    }

    vaadin {
        version = "7.7.7"
        logToConsole = true
    }

    vaadinCompile {
        draftCompile = true
        strict = true
    }

    sourceCompatibility = "1.7"
    targetCompatibility = "1.7"

    group = "org.vaadin.risto.${baseNameLower}"

    //creates archives named "name-version.jar" and "name.war" where name is the name of the main project
    archivesBaseName = baseNameLower
}

//addon project, only creates the Directory-compatible JAR
project(":addon") {
    version = "2.3.0"

    vaadin {
        addon {
            styles = ["/VAADIN/addons/stepper/stepper.scss"]
            author = "Risto Yrjänä / Vaadin"
            license = "Apache License 2.0"
            title = baseNameUpper
        }
    }

    vaadinCompile {
        manageWidgetset = false
        widgetset = "${group}.${baseNameUpper}Widgetset"
    }

    dependencies {
        testCompile "junit:junit:4.12"
    }

    jar {
        from sourceSets.main.allJava //include sources
    }

    war.enabled = false
}

//demo project, builds addon and packages demo UI as WAR
project(":demo") {

    vaadinCompile.manageWidgetset = true

    vaadinRun {
        server = 'jetty'
        openInBrowser = false
    }

    dependencies {
        compile project(":addon")
        compile group: 'com.google.guava', name: 'guava', version: '21.0'
    }

    war.enabled = true
}

task(dist, type: Sync, dependsOn: [':addon:jar', ':demo:war']) {
    description = "Copies the addon JAR and the demo WAR to target/"
    File targetDir = mkdir("target")
    from project(":addon").jar.archivePath
    from project(":demo").war.archivePath
    into targetDir
}
